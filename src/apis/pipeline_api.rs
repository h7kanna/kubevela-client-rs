/*
 * Kubevela api doc
 *
 * Kubevela api doc
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: feedback@mail.kubevela.io
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`create_context_value`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateContextValueError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_pipeline`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreatePipelineError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_context_value`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteContextValueError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_pipeline`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeletePipelineError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_pipeline_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeletePipelineRunError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_pipeline`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPipelineError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_pipeline_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPipelineRunError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_pipeline_run_input`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPipelineRunInputError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_pipeline_run_log`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPipelineRunLogError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_pipeline_run_output`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPipelineRunOutputError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_pipeline_run_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPipelineRunStatusError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_context_values`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListContextValuesError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_pipeline_runs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListPipelineRunsError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_pipelines`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListPipelinesError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`resume_pipeline_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResumePipelineRunError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`run_pipeline`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RunPipelineError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stop_pipeline`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopPipelineError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`terminate_pipeline_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TerminatePipelineRunError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_context_value`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateContextValueError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_pipeline`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdatePipelineError {
    Status400(crate::models::BcodePeriodBcode),
    UnknownValue(serde_json::Value),
}


pub async fn create_context_value(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, body: crate::models::V1PeriodCreateContextValuesRequest) -> Result<crate::models::V1PeriodContext, Error<CreateContextValueError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateContextValueError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_pipeline(configuration: &configuration::Configuration, project_name: &str, body: crate::models::V1PeriodCreatePipelineRequest) -> Result<crate::models::V1PeriodPipelineBase, Error<CreatePipelineError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreatePipelineError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_context_value(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, context_name: &str) -> Result<crate::models::V1PeriodContextNameResponse, Error<DeleteContextValueError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts/{contextName}", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name), contextName=crate::apis::urlencode(context_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteContextValueError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_pipeline(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str) -> Result<crate::models::V1PeriodPipelineMetaResponse, Error<DeletePipelineError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeletePipelineError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_pipeline_run(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, run_name: &str) -> Result<crate::models::V1PeriodPipelineRunMeta, Error<DeletePipelineRunError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name), runName=crate::apis::urlencode(run_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeletePipelineRunError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_pipeline(configuration: &configuration::Configuration, pipeline_name: &str, project_name: &str) -> Result<crate::models::V1PeriodGetPipelineResponse, Error<GetPipelineError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}", local_var_configuration.base_path, pipelineName=crate::apis::urlencode(pipeline_name), projectName=crate::apis::urlencode(project_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPipelineError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_pipeline_run(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, run_name: &str) -> Result<crate::models::V1PeriodPipelineRunBase, Error<GetPipelineRunError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name), runName=crate::apis::urlencode(run_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPipelineRunError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_pipeline_run_input(configuration: &configuration::Configuration, step: &str, project_name: &str, pipeline_name: &str, run_name: &str) -> Result<crate::models::V1PeriodGetPipelineRunInputResponse, Error<GetPipelineRunInputError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/input", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name), runName=crate::apis::urlencode(run_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("step", &step.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPipelineRunInputError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_pipeline_run_log(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, run_name: &str, step: Option<&str>) -> Result<crate::models::V1PeriodGetPipelineRunLogResponse, Error<GetPipelineRunLogError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/log", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name), runName=crate::apis::urlencode(run_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = step {
        local_var_req_builder = local_var_req_builder.query(&[("step", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPipelineRunLogError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_pipeline_run_output(configuration: &configuration::Configuration, step: &str, project_name: &str, pipeline_name: &str, run_name: &str) -> Result<crate::models::V1PeriodGetPipelineRunOutputResponse, Error<GetPipelineRunOutputError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/output", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name), runName=crate::apis::urlencode(run_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("step", &step.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPipelineRunOutputError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_pipeline_run_status(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, run_name: &str) -> Result<crate::models::V1alpha1PeriodWorkflowRunStatus, Error<GetPipelineRunStatusError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/status", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name), runName=crate::apis::urlencode(run_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPipelineRunStatusError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_context_values(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str) -> Result<crate::models::V1PeriodListContextValueResponse, Error<ListContextValuesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListContextValuesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_pipeline_runs(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, status: Option<&str>) -> Result<crate::models::V1PeriodListPipelineRunResponse, Error<ListPipelineRunsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListPipelineRunsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_pipelines(configuration: &configuration::Configuration, query: Option<&str>, project_name: Option<&str>, detailed: Option<bool>) -> Result<crate::models::V1PeriodListPipelineResponse, Error<ListPipelinesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/pipelines", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = query {
        local_var_req_builder = local_var_req_builder.query(&[("query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = project_name {
        local_var_req_builder = local_var_req_builder.query(&[("projectName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = detailed {
        local_var_req_builder = local_var_req_builder.query(&[("detailed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListPipelinesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn resume_pipeline_run(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, run_name: &str, step: Option<&str>) -> Result<serde_json::Value, Error<ResumePipelineRunError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/resume", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name), runName=crate::apis::urlencode(run_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = step {
        local_var_req_builder = local_var_req_builder.query(&[("step", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ResumePipelineRunError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn run_pipeline(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, body: crate::models::V1PeriodRunPipelineRequest) -> Result<crate::models::V1PeriodPipelineRun, Error<RunPipelineError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/run", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RunPipelineError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn stop_pipeline(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, run_name: &str) -> Result<crate::models::V1PeriodPipelineRunMeta, Error<StopPipelineError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/stop", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name), runName=crate::apis::urlencode(run_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StopPipelineError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn terminate_pipeline_run(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, run_name: &str) -> Result<serde_json::Value, Error<TerminatePipelineRunError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/terminate", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name), runName=crate::apis::urlencode(run_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TerminatePipelineRunError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_context_value(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, context_name: &str, body: crate::models::V1PeriodUpdateContextValuesRequest) -> Result<crate::models::V1PeriodContext, Error<UpdateContextValueError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts/{contextName}", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name), contextName=crate::apis::urlencode(context_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateContextValueError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_pipeline(configuration: &configuration::Configuration, project_name: &str, pipeline_name: &str, body: crate::models::V1PeriodUpdatePipelineRequest) -> Result<crate::models::V1PeriodPipelineBase, Error<UpdatePipelineError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{projectName}/pipelines/{pipelineName}", local_var_configuration.base_path, projectName=crate::apis::urlencode(project_name), pipelineName=crate::apis::urlencode(pipeline_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdatePipelineError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

