/*
 * Kubevela api doc
 *
 * Kubevela api doc
 *
 * The version of the OpenAPI document: 1.9.7
 * Contact: feedback@mail.kubevela.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TypesPeriodJsonData {
    #[serde(rename = "authSecret", skip_serializing_if = "Option::is_none")]
    pub auth_secret: Option<Box<crate::models::TypesPeriodKubernetesSecret>>,
    #[serde(rename = "authType", skip_serializing_if = "Option::is_none")]
    pub auth_type: Option<String>,
    #[serde(rename = "backend")]
    pub backend: bool,
    #[serde(rename = "backendService")]
    pub backend_service: Box<crate::models::TypesPeriodKubernetesService>,
    #[serde(rename = "backendType")]
    pub backend_type: String,
    #[serde(rename = "category")]
    pub category: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "includes")]
    pub includes: Vec<crate::models::TypesPeriodIncludes>,
    #[serde(rename = "info")]
    pub info: Box<crate::models::TypesPeriodInfo>,
    #[serde(rename = "kubePermissions", skip_serializing_if = "Option::is_none")]
    pub kube_permissions: Option<Vec<crate::models::V1PeriodPolicyRule>>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "proxy")]
    pub proxy: bool,
    #[serde(rename = "requirement", skip_serializing_if = "Option::is_none")]
    pub requirement: Option<Box<crate::models::TypesPeriodRequirement>>,
    #[serde(rename = "routes", skip_serializing_if = "Option::is_none")]
    pub routes: Option<Vec<crate::models::TypesPeriodRoute>>,
    #[serde(rename = "subType")]
    pub sub_type: String,
    #[serde(rename = "type")]
    pub r#type: String,
}

impl TypesPeriodJsonData {
    pub fn new(backend: bool, backend_service: crate::models::TypesPeriodKubernetesService, backend_type: String, category: String, id: String, includes: Vec<crate::models::TypesPeriodIncludes>, info: crate::models::TypesPeriodInfo, name: String, proxy: bool, sub_type: String, r#type: String) -> TypesPeriodJsonData {
        TypesPeriodJsonData {
            auth_secret: None,
            auth_type: None,
            backend,
            backend_service: Box::new(backend_service),
            backend_type,
            category,
            id,
            includes,
            info: Box::new(info),
            kube_permissions: None,
            name,
            proxy,
            requirement: None,
            routes: None,
            sub_type,
            r#type,
        }
    }
}


